"use strict";
const fileType_1 = require("../utils/fileType");
function toValue(data) {
    if (/^-?\d+(\.\d+)?$/.test(data))
        return Number(data);
    if (data === 'true')
        return true;
    if (data === 'false')
        return false;
    if (data === 'null')
        return null;
    return data;
}
function queryToObject(queryString) {
    if (!queryString)
        return null;
    const query = queryString.split('&').map(e => {
        const [key, value] = e.split('=');
        return [key, toValue(value)];
    });
    return Object.fromEntries(query);
}
function objectToQuery(obj) {
    return Object.entries(obj)
        .map(([key, value]) => `${key}=${value}`)
        .join('&');
}
function clearPath(path) {
    const newpath = path.split(/\//g).filter(Boolean).join('/').replace(/\/$/, '');
    const value = newpath === '*' ? newpath : `/${newpath}`;
    return value;
}
function isContentType(type) {
    return !!type.match(/^(.*)\/(.*)$/);
}
function betterRequest(req, res, next) {
    const { url = '/' } = req;
    const [path, query = ''] = url.split('?');
    req.query = queryToObject(query);
    req.path = clearPath(path);
    req.url = req.path + (query ? '?' + objectToQuery(req.query) : '');
    req.accepts = (type) => {
        const accept = req.headers['accept'] || '*/*';
        if (accept.includes('*/*'))
            return true;
        const accepts = accept.split(/,\s*/g);
        if (isContentType(type))
            return accepts.includes(type);
        else
            return accepts.includes((0, fileType_1.extToContentType)(type));
    };
}
betterRequest.clearPath = clearPath;
module.exports = betterRequest;
